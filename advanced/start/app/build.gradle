/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    alias(libs.plugins.com.android.application)
    alias(libs.plugins.org.jetbrains.kotlin.android)
    alias(libs.plugins.com.google.devtools.ksp)
}

android {
    namespace 'com.example.android.codelabs.paging'
    compileSdk rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.example.android.codelabs.paging"
        minSdk rootProject.minSdkVersion
        targetSdk rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }

    compileOptions {
        sourceCompatibility 17
        targetCompatibility 17
    }

    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    // androidx
    implementation(libs.core.ktx)
    implementation(libs.appcompat)
    implementation(libs.paging)
    implementation(libs.room.runtime)
    implementation(libs.room.ktx)
    implementation(libs.room.paging)
    ksp(libs.room.compiler)

    // google
    api(libs.material)

    // retrofit
    implementation(libs.retrofit2)
    implementation(libs.retrofit.mock)
    implementation(libs.converter.gson)
    implementation(libs.logging.interceptor)
}
